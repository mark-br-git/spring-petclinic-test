pipeline {
    agent any

    environment {
        // Define your environment variables here
        ARTIFACT_REGISTRY = 'gcr.io/project-name'
        VM_NAME = 'your-vm-name'
        GCP_PROJECT = 'your-gcp-project'
        DATABASE_HOST = 'your-database-host'
        DATABASE_USER = 'your-database-user'
        DATABASE_PASSWORD = 'your-database-password'
        DATABASE_NAME = 'your-database-name'
    }

    stages {
        stage('Semantic Versioning') {
            steps {
                script {
                    // Run the Python script to calculate the new version
                    def newVersion = sh(script: 'python3 server_script.py', returnStdout: true).trim()
                    currentBuild.displayName = "Release ${newVersion}"

                    // Create a Git tag with the new version
                    sh "git tag -a ${newVersion} -m 'Release ${newVersion}'"
                    sh "git push origin ${newVersion}"

                    // Archive the artifacts with the Git tag
                    archiveArtifacts artifacts: '**/*', allowEmptyArchive: true, onlyIfSuccessful: false
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Build your Docker image and tag it with the new version
                    sh "docker build -t ${ARTIFACT_REGISTRY}/spring-petclinic:${newVersion} ."
                    sh "docker push ${ARTIFACT_REGISTRY}/spring-petclinic:${newVersion}"
                }
            }
        }

        stage('Manual Deployment') {
            steps {
         script {
            // SSH configuration for your VM
            def vmUser = 'mbryg'
            def vmHost = 'vm-jenkins'
            def sshKeyPath = '/path/to/your/ssh/key'

            // Application details
            def appName = 'my-app'
            def appVersion = '1.0.0'  // Replace with the desired version

            // MySQL database connection details
            def dbHost = 'mysql-host'
            def dbPort = '3306'
            def dbName = 'mydb'
            def dbUser = 'db-username'
            def dbPassword = 'db-password'

            // Connect to the VM using SSH
            sshagent([sshKeyPath]) {
                sh "ssh ${vmUser}@${vmHost} 'echo Connected to VM'"
                
                // Check if a previous version of the application exists and remove it
                sh "ssh ${vmUser}@${vmHost} 'docker ps -a | grep ${appName}:${appVersion} && docker rm -f ${appName}:${appVersion} || echo No previous version found'"
                
                // Pull the new Docker image from the artifact storage
                sh "ssh ${vmUser}@${vmHost} 'docker pull my-app:${appVersion}'"

                // Run the application, ensuring it's connected to the MySQL database
                sh "ssh ${vmUser}@${vmHost} 'docker run -d --name ${appName}:${appVersion} --network host -e DB_HOST=${dbHost} -e DB_PORT=${dbPort} -e DB_NAME=${dbName} -e DB_USER=${dbUser} -e DB_PASSWORD=${dbPassword} my-app:${appVersion}'"
            }

            // Print the link to the application
            echo "Application is running at http://${vmHost}:<app_port>"
        }
            }
        }
    }
}
