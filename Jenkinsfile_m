pipeline {
    agent any

      stages {
        stage('Creating tag') {
            steps {
                script {
                withCredentials([usernamePassword(credentialsId: 'git', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                def currentTag = sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()
            //    def newVersion = sh(returnStdout: true, script: "python3 semver_script.py $currentTag")
                 def newVersion = "1.25.0"
              
            //    sh("git tag -a some_tag11 -m 'Jenkins'")
                sh "git tag $newVersion"
                sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/mark-br-git/spring-petclinic-test.git $newVersion')
                }
                }
             }
           }

  //      stage('Bump Version and Create Tag') {
 //           steps {
  //              script {
  //                  def currentTag = sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()
  //                  def newVersion = sh(returnStdout: true, script: "python3 semver_script.py $currentTag")

   //                 sh "git tag $newVersion"
  //                  sh "git push origin $newVersion"
  //              }
   //         }
   //     }

            stage('Build Docker Image') {
               steps {
                  script {
                    // Define Docker Hub repository and image name
                    def dockerRepo = 'mark67br/main'
                    def imageName = "${dockerRepo}:$newVersion"

                    // Build the Docker image with the git tag
                    sh "docker build -t ${imageName} -f Dockerfile_main ."

                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                    }

                    // Push the Docker image to Docker Hub repository
                    sh "docker push ${imageName}"
                }
            }

         }

stage('Manual Deployment') {
    when {
        expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
    }
    steps {
        script {
            // SSH configuration for your VM
            def vmUser = 'your_vm_username'
            def vmHost = 'your_vm_host'
            def sshKeyPath = '/path/to/your/ssh/key'

            // Application details
            def appName = 'my-app'
            def appVersion = '1.0.0'  // Replace with the desired version

            // MySQL database connection details
            def dbHost = 'mysql-host'
            def dbPort = '3306'
            def dbName = 'mydb'
            def dbUser = 'db-username'
            def dbPassword = 'db-password'

            // Connect to the VM using SSH
            sshagent([sshKeyPath]) {
                sh "ssh ${vmUser}@${vmHost} 'echo Connected to VM'"
                
                // Check if a previous version of the application exists and remove it
                sh "ssh ${vmUser}@${vmHost} 'docker ps -a | grep ${appName}:${appVersion} && docker rm -f ${appName}:${appVersion} || echo No previous version found'"
                
                // Pull the new Docker image from the artifact storage
                sh "ssh ${vmUser}@${vmHost} 'docker pull my-app:${appVersion}'"

                // Run the application, ensuring it's connected to the MySQL database
                sh "ssh ${vmUser}@${vmHost} 'docker run -d --name ${appName}:${appVersion} --network host -e DB_HOST=${dbHost} -e DB_PORT=${dbPort} -e DB_NAME=${dbName} -e DB_USER=${dbUser} -e DB_PASSWORD=${dbPassword} my-app:${appVersion}'"
            }

            // Print the link to the application
            echo "Application is running at http://${vmHost}:<app_port>"
        }
    }
}


}
}
