pipeline {
    agent any

      stages {
        stage('Creating tag') {
            steps {
                script {
                withCredentials([usernamePassword(credentialsId: 'git', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                def currentTag = sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()
                def newVersion = sh(returnStdout: true, script: "python3 semver_script.py $currentTag")
        
                sh "git tag $newVersion"
                sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/mark-br-git/spring-petclinic-test.git $newVersion HEAD:main')
                 }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                // Define Docker Hub repository and image name
                def currentTagNew = sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()                    
                def dockerRepo = 'mark67br/main'
                def imageName = "${dockerRepo}:$currentTagNew"

                // Build the Docker image with the git tag
                sh "docker build -t ${imageName} -f Dockerfile_main ."

              // Log in to Docker Hub
               withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                    }

              // Push the Docker image to Docker Hub repository
               sh "docker push ${imageName}"
               }
            }

         }

         stage('Manual Deployment') {
            steps {
               script {
               def userInput = input(
               message: 'Are you sure you want to run deployment?',
               parameters: [choice(choices: ['yes', 'no'], description: 'Choose "yes" or "no"', name: 'Confirmation')]
             )

             if (userInput == 'yes') {           
             // SSH configuration for VM
             def vmUser = 'jenkins'
             def vmHost = '34.118.84.52'
             def sshKeyPath = '/var/lib/jenkins/.ssh/id_rsa'
             def currentTag1 = sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()

             // Application details
             def appName = 'mark67br/main'

             // MySQL database connection details
             def dbHost = '34.116.253.205'
             def dbPort = '3306'
             def dbName = 'petclinic'
             def dbUser = 'petclinic'
             def dbPassword = 'petclinic'

              // Connect to the VM using SSH
              sshagent(credentials: ['SSHjenkins']) {
                sh "ssh  ${vmUser}@${vmHost} 'echo Connected to VM'"
                
                // Check if a previous version of the application exists and remove it
                sh "ssh ${vmUser}@${vmHost} 'docker ps -a | grep ${appName}:${currentTag1} && docker rm -f ${appName}:${currentTag1} || echo No previous version found'"
                
                // Pull the new Docker image from the artifact storage
                sh "ssh ${vmUser}@${vmHost} 'docker pull mark67br/main:${currentTag1}'"

                // Run the application, ensuring it's connected to the MySQL database
                sh "ssh ${vmUser}@${vmHost} 'docker run -d --name spring-petclinic --network host -e DB_HOST=${dbHost} -e DB_PORT=${dbPort} -e DB_NAME=${dbName} -e DB_USER=${dbUser} -e DB_PASSWORD=${dbPassword} mark67br/main:${currentTag1}'"
               }

               // Print the link to the application
               echo "Application is running at http://${vmHost}:8080"
               }
               else {
                 error('The operation has been cancelled.')
                }
             }
          } 


       }
    }
}
